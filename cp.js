/* cp.js  find the two closest points in a Cartesian plane of random points. */
const fs = require('fs')
let i, p = [];
const bounds = 100000;

// step 1. generate an array of points
//for(i=0;i<100000;i++) { p.push([Math.random() * bounds, Math.random() * bounds]); }

//console.log("size =",p.length);

p = JSON.parse(fs.readFileSync("k.json","utf8"))
//console.log("read",p.length);

// distance formula
const distance = (dx,dy) => {
  return Math.sqrt( (dx**2) + (dy**2) );
}

// sort by x-values
p = p.sort((a,b)=>a[0]-b[0])

// brilliant force
let j, dist, s1, s2, shortest = 100000000; // (any super big num)
let dx,dy
for(i=0;i<p.length-1;i++) {
  for(j=i+1;j<p.length;j++) {
    dx = p[i][0]-p[j][0];
    if(dx < 0) dx = dx * -1;
    if(dx > shortest) { break; } // timesaver!
    dy = p[i][1]-p[j][1];
    if(dy < 0) dy = dy * -1;
    if(dy < shortest) {
      dist = distance(dx,dy);
      if(dist < shortest) {
        s1 = i;
        s2 = j;
        shortest = dist;
console.log(i,j,"THIS:",p[s1],"..",p[s2],"...",shortest);
      }
    }
  }
}
console.log(i,j);

console.log("shortest distance is (pp)",shortest)
console.log(p[s1],"..",p[s2]);

/*
100,000 IN 1/4 second

> time node cp.js
read 100000
[ 1.0383826783977312, 59197.244256828286 ]
0 1 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 1.1095610262801259, 6603.9570515261885 ] ... 52593.287205350265
0 2 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 1.3147594446261124, 46042.795092084285 ] ... 13154.449167647357
0 6 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 4.571181818091574, 64141.95350569349 ] ... 4944.710510887656
0 10 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 9.02499697528203, 55074.67839862372 ] ... 4122.573594399725
0 22 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 20.94044979890075, 61669.83989497909 ] ... 2472.6757333055357
0 67 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 68.01391879560637, 58538.536787350684 ] ... 662.1036571291337
0 135 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 127.03327872416459, 59138.340912586296 ] ... 139.08385165961548
4 150 THIS: [ 3.05004026948108, 88083.14046131451 ] .. [ 137.70505519825616, 88059.00656882355 ] ... 136.80064989697271
9 57 THIS: [ 8.369314938305727, 16593.669333721882 ] .. [ 56.87593806198432, 16585.843497678776 ] ... 49.133859981037254
44 68 THIS: [ 43.86778878313624, 85280.15250254744 ] .. [ 68.06788284063892, 85244.45979426967 ] ... 43.12324172176665
60 70 THIS: [ 60.1137372327587, 14616.31857622967 ] .. [ 69.20209176557447, 14614.915665754968 ] ... 9.195996189330575
92 103 THIS: [ 93.89877803187562, 84200.09984440953 ] .. [ 102.4504630857681, 84199.41391755968 ] ... 8.57914989403472
719 725 THIS: [ 676.3474351150434, 77398.5821163049 ] .. [ 679.5990620079629, 77397.80306556949 ] ... 3.3436503254820518
7422 7424 THIS: [ 7324.085299293471, 17627.38174642986 ] .. [ 7325.715811846223, 17626.333359267377 ] ... 1.9384753872928446
33032 33033 THIS: [ 33109.38974432129, 90461.44627474817 ] .. [ 33109.498148510516, 90463.00895858921 ] ... 1.5664393557638
56037 56038 THIS: [ 56124.98011811651, 76568.71400282437 ] .. [ 56125.565612595674, 76567.4485500617 ] ... 1.3943365733166055
58937 58939 THIS: [ 59060.23257725028, 32726.704401809624 ] .. [ 59061.23837727015, 32726.840982462945 ] ... 1.0150310117584764
99999 100000
shortest distance is (pp) 1.0150310117584764
[ 59060.23257725028, 32726.704401809624 ] .. [ 59061.23837727015, 32726.840982462945 ]

real	0m0.273s
user	0m0.269s
sys	0m0.028s

versus 4m20s

> time node cpslow.js 
read 100000
[ 1.0383826783977312, 59197.244256828286 ]
0 1 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 1.1095610262801259, 6603.9570515261885 ] ... 52593.287205350265
0 2 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 1.3147594446261124, 46042.795092084285 ] ... 13154.449167647357
0 6 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 4.571181818091574, 64141.95350569349 ] ... 4944.710510887656
0 10 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 9.02499697528203, 55074.67839862372 ] ... 4122.573594399725
0 22 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 20.94044979890075, 61669.83989497909 ] ... 2472.6757333055357
0 67 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 68.01391879560637, 58538.536787350684 ] ... 662.1036571291337
0 135 THIS: [ 1.0383826783977312, 59197.244256828286 ] .. [ 127.03327872416459, 59138.340912586296 ] ... 139.08385165961548
4 150 THIS: [ 3.05004026948108, 88083.14046131451 ] .. [ 137.70505519825616, 88059.00656882355 ] ... 136.80064989697271
9 57 THIS: [ 8.369314938305727, 16593.669333721882 ] .. [ 56.87593806198432, 16585.843497678776 ] ... 49.133859981037254
44 68 THIS: [ 43.86778878313624, 85280.15250254744 ] .. [ 68.06788284063892, 85244.45979426967 ] ... 43.12324172176665
60 70 THIS: [ 60.1137372327587, 14616.31857622967 ] .. [ 69.20209176557447, 14614.915665754968 ] ... 9.195996189330575
92 103 THIS: [ 93.89877803187562, 84200.09984440953 ] .. [ 102.4504630857681, 84199.41391755968 ] ... 8.57914989403472
719 725 THIS: [ 676.3474351150434, 77398.5821163049 ] .. [ 679.5990620079629, 77397.80306556949 ] ... 3.3436503254820518
7422 7424 THIS: [ 7324.085299293471, 17627.38174642986 ] .. [ 7325.715811846223, 17626.333359267377 ] ... 1.9384753872928446
33032 33033 THIS: [ 33109.38974432129, 90461.44627474817 ] .. [ 33109.498148510516, 90463.00895858921 ] ... 1.5664393557638
56037 56038 THIS: [ 56124.98011811651, 76568.71400282437 ] .. [ 56125.565612595674, 76567.4485500617 ] ... 1.3943365733166055
58937 58939 THIS: [ 59060.23257725028, 32726.704401809624 ] .. [ 59061.23837727015, 32726.840982462945 ] ... 1.0150310117584764
99999 100000
shortest distance is (pp) 1.0150310117584764
[ 59060.23257725028, 32726.704401809624 ] .. [ 59061.23837727015, 32726.840982462945 ]

real	4m19.899s
user	4m19.728s
sys	0m0.085s

*/

/*
const bounds = 10000;
// step 1. generate an array of points
for(i=0;i<10000;i++) { p.push([Math.random() * bounds, Math.random() * bounds]); }
// step 2. save these points so we can confirm, manually, if necessary
fs.writeFileSync("tk.json", JSON.stringify(p));
return

const distance = (a,b) => {
  return Math.sqrt(  ((a[0]-b[0])**2) + ((a[1]-b[1])**2)    );
}

*/

